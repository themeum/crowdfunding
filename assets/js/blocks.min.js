/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./reactjs/src/blocks/campaign_box/Edit.js":
/*!*************************************************!*\
  !*** ./reactjs/src/blocks/campaign_box/Edit.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var withState = wp.compose.withState;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    TextControl = _wp$components.TextControl,
    Spinner = _wp$components.Spinner;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit() {
        _classCallCheck(this, Edit);

        return _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                campaignID = _props.attributes.campaignID,
                setAttributes = _props.setAttributes;
            var products = this.props.products;


            var output = '';

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: __(''), initialOpen: true },
                        React.createElement(TextControl, {
                            label: __('Campaign ID'),
                            value: campaignID,
                            onChange: function onChange(value) {
                                return setAttributes({ campaignID: value });
                            }
                        })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpneo-wrapper' },
                    React.createElement(
                        'div',
                        { className: 'wpneo-container' },
                        products && products.length ? React.createElement(
                            Fragment,
                            null,
                            products && React.createElement(
                                'div',
                                { className: 'wpneo-wrapper-inner' },
                                products.map(function (product) {

                                    if (product.id == campaignID) {
                                        output = React.createElement(
                                            'div',
                                            { className: 'wpneo-listings two col-' + product.column },
                                            React.createElement(
                                                'div',
                                                { className: 'wpneo-listing-img' },
                                                React.createElement('div', { dangerouslySetInnerHTML: { __html: product.wpcf_product.product_thumb } }),
                                                React.createElement(
                                                    'div',
                                                    { className: 'overlay' },
                                                    React.createElement(
                                                        'div',
                                                        null,
                                                        React.createElement(
                                                            'div',
                                                            null,
                                                            React.createElement(
                                                                'a',
                                                                { href: '#' },
                                                                'View Campaign'
                                                            )
                                                        )
                                                    )
                                                )
                                            ),
                                            React.createElement(
                                                'div',
                                                { className: 'wpneo-listing-content' },
                                                React.createElement('div', { className: 'woocommerce' }),
                                                React.createElement(
                                                    'h4',
                                                    null,
                                                    React.createElement(
                                                        'a',
                                                        { href: '' },
                                                        product.title.rendered
                                                    )
                                                ),
                                                React.createElement(
                                                    'p',
                                                    { className: 'wpneo-author' },
                                                    'by',
                                                    React.createElement(
                                                        'a',
                                                        { href: '' },
                                                        ' ',
                                                        product.wpcf_product.display_name
                                                    )
                                                ),
                                                React.createElement(
                                                    'div',
                                                    { className: 'wpneo-location' },
                                                    React.createElement('i', { className: 'wpneo-icon wpneo-icon-location' }),
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-meta-desc' },
                                                        product.wpcf_product.location
                                                    )
                                                ),
                                                React.createElement(
                                                    'p',
                                                    { className: 'wpneo-short-description' },
                                                    product.wpcf_product.desc
                                                ),
                                                React.createElement(
                                                    'div',
                                                    { className: 'wpneo-raised-percent' },
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-meta-name' },
                                                        'Raised Percent :'
                                                    ),
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-meta-desc' },
                                                        product.wpcf_product.raised_percent
                                                    )
                                                ),
                                                React.createElement(
                                                    'div',
                                                    { className: 'wpneo-raised-bar' },
                                                    React.createElement(
                                                        'div',
                                                        { id: 'neo-progressbar' },
                                                        React.createElement('div', { style: { width: product.wpcf_product.raised_percent } })
                                                    )
                                                ),
                                                React.createElement(
                                                    'div',
                                                    { className: 'wpneo-funding-data' },
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-funding-goal' },
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-meta-desc' },
                                                            React.createElement(
                                                                'span',
                                                                { className: 'woocommerce-Price-amount amount' },
                                                                React.createElement(
                                                                    'span',
                                                                    { className: 'woocommerce-Price-currencySymbol' },
                                                                    '$'
                                                                ),
                                                                product.wpcf_product.funding_goal
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-meta-name' },
                                                            'Funding Goal'
                                                        )
                                                    ),
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-time-remaining' },
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-meta-desc' },
                                                            product.wpcf_product.days_remaining
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-meta-name float-left' },
                                                            'Days to go'
                                                        )
                                                    ),
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-fund-raised' },
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-meta-desc' },
                                                            React.createElement(
                                                                'span',
                                                                { className: 'woocommerce-Price-amount amount' },
                                                                React.createElement(
                                                                    'span',
                                                                    { className: 'woocommerce-Price-currencySymbol' },
                                                                    '$'
                                                                ),
                                                                product.wpcf_product.total_raised
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-meta-name' },
                                                            'Fund Raised'
                                                        )
                                                    )
                                                )
                                            )
                                        );
                                        return output;
                                    }
                                })
                            )
                        ) : React.createElement(
                            'div',
                            { className: 'wpcf-products-is-loading' },
                            campaignID ? React.createElement(Spinner, null) : React.createElement(
                                'h2',
                                null,
                                'Add your Campaign ID'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _select = select('core'),
        getEntityRecords = _select.getEntityRecords;

    var output = { products: getEntityRecords('postType', 'product', { per_page: -1, status: 'publish', _embed: true }) };
    return output;
})(Edit);

/***/ }),

/***/ "./reactjs/src/blocks/campaign_box/index.js":
/*!**************************************************!*\
  !*** ./reactjs/src/blocks/campaign_box/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/campaign_box/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/campaignbox', {
	title: __('Campaign Box'),
	icon: 'format-aside',
	category: 'wp-crowdfunding',
	keywords: [__('Campaign Box'), __('WPCF Project Campaign Box')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/dashboard/Edit.js":
/*!**********************************************!*\
  !*** ./reactjs/src/blocks/dashboard/Edit.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withState = wp.compose.withState;
var withSelect = wp.data.withSelect;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    ColorPalette = _wp$components.ColorPalette,
    Spinner = _wp$components.Spinner;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                _props$attributes = _props.attributes,
                bgColor = _props$attributes.bgColor,
                titleColor = _props$attributes.titleColor;
            var products = this.props.products;

            // Major Color 

            var bgColors = [{ name: 'Color Code: #1adc68', color: '#1adc68' }, { name: 'Color Code: #8224e3', color: '#8224e3' }, { name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

            // Title Color Color 
            var titleColors = [{ name: 'Gray', color: '#ccc' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: __(''), initialOpen: true },
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Major Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Major Color'),
                            colors: bgColors,
                            value: bgColor,
                            onChange: function onChange(value) {
                                return setAttributes({ bgColor: value });
                            },
                            withTransparentOption: true
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Text Color'),
                            colors: titleColors,
                            value: titleColor,
                            onChange: function onChange(value) {
                                return setAttributes({ titleColor: value });
                            },
                            withTransparentOption: true
                        })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpcf-dashboard' },
                    products && products.length ? React.createElement(
                        Fragment,
                        null,
                        products && React.createElement(
                            'div',
                            { className: 'wpneo-wrapper-inner' },
                            products.map(function (product) {
                                return React.createElement('div', { dangerouslySetInnerHTML: { __html: product.wpcf_dashboard } });
                            })
                        )
                    ) : React.createElement(
                        'div',
                        { className: 'wpcf-products-is-loading' },
                        React.createElement(Spinner, null)
                    )
                ),
                React.createElement(
                    'style',
                    null,
                    '\n                        .wpcf-dashboard .wp-crowd-btn-primary, .wpcf-dashboard .wpneo-dashboard-summary ul li.active,\n                        .wpcf-dashboard .wpneo-edit-btn, .wpcf-dashboard .wpneo-pagination ul li span.current, .wpneo-pagination ul li a:hover, .wpneo-pagination ul li span.current {\n                            background-color: ' + bgColor + '\n                        }\n                        .wpneo-links div.active a, .wpneo-links div a:hover, \n                        .wpcf-dashboard .wpneo-name > p, .wpcf-dashboard .wpcrowd-listing-content .wpcrowd-admin-title h3 a{\n                            color: ' + bgColor + '\n                        }\n\n                        .wpneo-links div a.wp-crowd-btn.wp-crowd-btn-primary, .wpneo-links div a.wp-crowd-btn.wp-crowd-btn-primary:hover, .wpcf-dashboard .wp-crowd-btn-primary, .wpcf-dashboard .wpneo-pagination ul li span.current, .wpneo-pagination ul li a:hover, .wpneo-pagination ul li span.current, .wpneo-dashboard-summary ul li.active .wpneo-value, .wpneo-dashboard-summary ul li.active .wpneo-value-info {\n                            color: ' + titleColor + '\n                        }\n                    '
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = withSelect(function (select, props) {
    return {
        products: select('core').getEntityRecords('postType', 'product', { per_page: 1, status: 'publish',
            _embed: true })
    };
})(Edit);

/***/ }),

/***/ "./reactjs/src/blocks/dashboard/index.js":
/*!***********************************************!*\
  !*** ./reactjs/src/blocks/dashboard/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/dashboard/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/dashboard', {
	title: __('Dashboard'),
	icon: 'admin-site',
	category: 'wp-crowdfunding',
	keywords: [__('Dashboard'), __('WPCF Dashboard')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/donate/Edit.js":
/*!*******************************************!*\
  !*** ./reactjs/src/blocks/donate/Edit.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withState = wp.compose.withState;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ColorPalette = _wp$components.ColorPalette,
    RangeControl = _wp$components.RangeControl,
    TextControl = _wp$components.TextControl;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                _props$attributes = _props.attributes,
                formSize = _props$attributes.formSize,
                bgColorpalette = _props$attributes.bgColorpalette,
                titleColor = _props$attributes.titleColor,
                fontSize = _props$attributes.fontSize,
                fontWeight = _props$attributes.fontWeight,
                SearchfontSize = _props$attributes.SearchfontSize,
                campaignID = _props$attributes.campaignID,
                formAlign = _props$attributes.formAlign;

            // Background Color 

            var bgcolors = [{ name: 'Color Code: #0073a8', color: '#0073a8' }, { name: 'Color Code: #005075', color: '#005075' }, { name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

            // Title Color Color 
            var colors = [{ name: 'Gray', color: '#ccc' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];

            // Font Width.
            var SelectFontWidthControl = withState({
                fontWeight: fontWeight
            })(function (_ref) {
                var fontWeight = _ref.fontWeight,
                    setState = _ref.setState;
                return React.createElement(SelectControl, {
                    label: 'Font Weight',
                    value: fontWeight,
                    options: [{ label: '100', value: '100' }, { label: '400', value: '400' }, { label: '500', value: '500' }, { label: '600', value: '600' }, { label: '700', value: '700' }, { label: '800', value: '800' }],
                    onChange: function onChange(value) {
                        setAttributes({ fontWeight: value });
                    }
                });
            });

            var btnStyle = {
                background: bgColorpalette,
                color: titleColor,
                fontSize: fontSize,
                fontWeight: fontWeight
            };
            var searchStyle = {
                fontSize: SearchfontSize
            };

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: '', initialOpen: true },
                        React.createElement(TextControl, {
                            label: __('Campaign ID'),
                            value: campaignID,
                            onChange: function onChange(value) {
                                return setAttributes({ campaignID: value });
                            }
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Input Style'), initialOpen: false },
                        React.createElement(SelectControl, {
                            label: __("Alignment"),
                            value: formAlign,
                            options: [{ label: __('Left'), value: 'left' }, { label: __('Right'), value: 'right' }, { label: __('Center'), value: 'center' }],
                            onChange: function onChange(value) {
                                return setAttributes({ formAlign: value });
                            }
                        }),
                        React.createElement(SelectControl, {
                            label: __("Form Size"),
                            value: formSize,
                            options: [{ label: __('Small'), value: 'small' }, { label: __('Medium'), value: 'medium' }, { label: __('Full'), value: 'full' }],
                            onChange: function onChange(value) {
                                return setAttributes({ formSize: value });
                            }
                        }),
                        React.createElement(RangeControl, {
                            label: 'Font Size',
                            value: SearchfontSize,
                            onChange: function onChange(value) {
                                setAttributes({ SearchfontSize: value });
                            },
                            min: 5,
                            max: 20
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Button Style'), initialOpen: false },
                        React.createElement(RangeControl, {
                            label: 'Font Size',
                            value: fontSize,
                            onChange: function onChange(value) {
                                setAttributes({ fontSize: value });
                            },
                            min: 5,
                            max: 30
                        }),
                        React.createElement(SelectFontWidthControl, null),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Title Color',
                            colors: colors,
                            value: titleColor,
                            onChange: function onChange(value) {
                                setAttributes({ titleColor: value });
                            }
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Background Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Background Color',
                            colors: bgcolors,
                            value: bgColorpalette,
                            onChange: function onChange(value) {
                                setAttributes({ bgColorpalette: value });
                            }
                        })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpcf-form-field ' + formSize + ' ' + formAlign },
                    React.createElement(
                        'div',
                        { className: 'wpcf-donate-form-wrap' },
                        React.createElement(
                            'form',
                            { enctype: 'multipart/form-data', method: 'post', className: 'cart' },
                            React.createElement('input', { type: 'number', name: 'wpneo_donate_amount_field', className: 'search-field input-text amount wpneo_donate_amount_field text', style: searchStyle }),
                            React.createElement('input', { type: 'hidden', value: '', name: 'add-to-cart' }),
                            React.createElement(
                                'button',
                                { type: 'button', className: 'wpneo_donate_button', style: btnStyle },
                                'Back Campaign'
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = Edit;

/***/ }),

/***/ "./reactjs/src/blocks/donate/index.js":
/*!********************************************!*\
  !*** ./reactjs/src/blocks/donate/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/donate/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/donate', {
	title: __('Donation'),
	icon: 'megaphone',
	category: 'wp-crowdfunding',
	keywords: [__('Campaign Donation'), __('WPCF Donation')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/popular_campaigns/Edit.js":
/*!******************************************************!*\
  !*** ./reactjs/src/blocks/popular_campaigns/Edit.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withSelect = wp.data.withSelect;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    SelectControl = _wp$components.SelectControl,
    RangeControl = _wp$components.RangeControl,
    Spinner = _wp$components.Spinner;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                _props$attributes = _props.attributes,
                order = _props$attributes.order,
                numbers = _props$attributes.numbers,
                setAttributes = _props.setAttributes;
            var products = this.props.products;

            var output = '';
            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(SelectControl, {
                        label: __('Post Order'),
                        value: order,
                        options: [{ label: 'ASC', value: 'asc' }, { label: 'DESC', value: 'desc' }],
                        onChange: function onChange(value) {
                            setAttributes({ order: value });
                        }
                    }),
                    React.createElement(RangeControl, {
                        label: __('Number Of Post'),
                        value: numbers,
                        onChange: function onChange(value) {
                            setAttributes({ numbers: value });
                        },
                        min: 1,
                        max: 20
                    })
                ),
                React.createElement(
                    'div',
                    { className: 'wpneo-wrapper' },
                    React.createElement(
                        'div',
                        { className: 'wpneo-container' },
                        products && products.length ? React.createElement(
                            Fragment,
                            null,
                            products && React.createElement(
                                'div',
                                { className: 'wpneo-wrapper-inner' },
                                products.map(function (product) {

                                    {
                                        product.wpcf_popular_campaign.map(function (campaign) {
                                            if (campaign.ID == product.id) {
                                                output = React.createElement(
                                                    'div',
                                                    { className: 'wpneo-listings two col-' + product.column },
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-listing-img' },
                                                        React.createElement('div', { dangerouslySetInnerHTML: { __html: product.wpcf_product.product_thumb } }),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'overlay' },
                                                            React.createElement(
                                                                'div',
                                                                null,
                                                                React.createElement(
                                                                    'div',
                                                                    null,
                                                                    React.createElement(
                                                                        'a',
                                                                        { href: '#' },
                                                                        'View Campaign'
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    ),
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-listing-content' },
                                                        React.createElement('div', { className: 'woocommerce' }),
                                                        React.createElement(
                                                            'h4',
                                                            null,
                                                            React.createElement(
                                                                'a',
                                                                { href: '#' },
                                                                product.title.rendered
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'p',
                                                            { className: 'wpneo-author' },
                                                            'by',
                                                            React.createElement(
                                                                'a',
                                                                { href: '#' },
                                                                ' ',
                                                                product.wpcf_product.display_name
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-location' },
                                                            React.createElement('i', { className: 'wpneo-icon wpneo-icon-location' }),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-meta-desc' },
                                                                product.wpcf_product.location
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'p',
                                                            { className: 'wpneo-short-description' },
                                                            product.wpcf_product.desc
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-raised-percent' },
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-meta-name' },
                                                                'Raised Percent :'
                                                            ),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-meta-desc' },
                                                                product.wpcf_product.raised_percent
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-raised-bar' },
                                                            React.createElement(
                                                                'div',
                                                                { id: 'neo-progressbar' },
                                                                React.createElement('div', { style: { width: product.wpcf_product.raised_percent } })
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-funding-data' },
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-funding-goal' },
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-desc' },
                                                                    React.createElement(
                                                                        'span',
                                                                        { className: 'woocommerce-Price-amount amount' },
                                                                        React.createElement(
                                                                            'span',
                                                                            { className: 'woocommerce-Price-currencySymbol' },
                                                                            '$'
                                                                        ),
                                                                        product.wpcf_product.funding_goal
                                                                    )
                                                                ),
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-name' },
                                                                    'Funding Goal'
                                                                )
                                                            ),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-time-remaining' },
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-desc' },
                                                                    product.wpcf_product.days_remaining
                                                                ),
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-name float-left' },
                                                                    'Days to go'
                                                                )
                                                            ),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-fund-raised' },
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-desc' },
                                                                    React.createElement(
                                                                        'span',
                                                                        { className: 'woocommerce-Price-amount amount' },
                                                                        React.createElement(
                                                                            'span',
                                                                            { className: 'woocommerce-Price-currencySymbol' },
                                                                            '$'
                                                                        ),
                                                                        product.wpcf_product.total_raised
                                                                    )
                                                                ),
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-name' },
                                                                    'Fund Raised'
                                                                )
                                                            )
                                                        )
                                                    )
                                                );
                                            }
                                        });
                                    }

                                    return output;
                                })
                            )
                        ) : React.createElement(
                            'div',
                            { className: 'wpcf-products-is-loading' },
                            React.createElement(Spinner, null)
                        )
                    )
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _props$attributes2 = props.attributes,
        numbers = _props$attributes2.numbers,
        order = _props$attributes2.order;


    return {
        products: select('core').getEntityRecords('postType', 'product', { per_page: numbers, order: order, 'ignore_sticky_posts': 1, metaKey: 'total_sales' })
    };
})(Edit);

/***/ }),

/***/ "./reactjs/src/blocks/popular_campaigns/index.js":
/*!*******************************************************!*\
  !*** ./reactjs/src/blocks/popular_campaigns/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/popular_campaigns/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/popularcampaigns', {
	title: __('Popular Campaigns'),
	icon: 'clipboard',
	category: 'wp-crowdfunding',
	keywords: [__('Popular Campaigns'), __('WPCF Project Popular Campaigns')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/projectlisting/Edit.js":
/*!***************************************************!*\
  !*** ./reactjs/src/blocks/projectlisting/Edit.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var _wp = wp,
    apiFetch = _wp.apiFetch;
var withSelect = wp.data.withSelect;
var addQueryArgs = wp.url.addQueryArgs;
var withState = wp.compose.withState;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    Spinner = _wp$components.Spinner,
    SelectControl = _wp$components.SelectControl,
    RangeControl = _wp$components.RangeControl,
    ColorPalette = _wp$components.ColorPalette;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                _props$attributes = _props.attributes,
                order = _props$attributes.order,
                order_by = _props$attributes.order_by,
                numbers = _props$attributes.numbers,
                mjColor = _props$attributes.mjColor,
                progressbarColor = _props$attributes.progressbarColor,
                authorColor = _props$attributes.authorColor,
                setAttributes = _props.setAttributes,
                products = _props.products;

            // Major Color 

            var mjColors = [{ name: 'Color Code: #1adc68', color: '#1adc68' }, { name: 'Color Code: #8224e3', color: '#8224e3' }, { name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

            // Title Color Color 
            var progressbarColors = [{ name: 'Color Code: #1adc68', color: '#1adc68' }, { name: 'Color Code: #8224e3', color: '#8224e3' }, { name: 'Dark Black', color: '#111111' }];
            var authorColors = [{ name: 'Gray', color: '#ccc' }, { name: 'White', color: '#737373' }, { name: 'Black', color: '#000' }];

            var output = '';

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: __(), initialOpen: true },
                        React.createElement(SelectControl, {
                            label: __('Post Order'),
                            value: order,
                            options: [{ label: 'ASC', value: 'asc' }, { label: 'DESC', value: 'desc' }],
                            onChange: function onChange(value) {
                                setAttributes({ order: value });
                            }
                        }),
                        React.createElement(SelectControl, {
                            label: __('Post Orderby'),
                            value: order_by,
                            options: [{ label: 'Date', value: 'date' }, { label: 'Title', value: 'title' }, { label: 'Modified', value: 'modified' }],
                            onChange: function onChange(value) {
                                setAttributes({ order_by: value });
                            }
                        }),
                        React.createElement(RangeControl, {
                            label: __('Number Of Post'),
                            value: numbers,
                            onChange: function onChange(value) {
                                setAttributes({ numbers: value });
                            },
                            min: 1,
                            max: 20
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Style', 'wp-crowdfunding'), initialOpen: false },
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Major Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Major Color'),
                            colors: mjColors,
                            value: mjColor,
                            onChange: function onChange(value) {
                                return setAttributes({ mjColor: value });
                            },
                            withTransparentOption: true
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Author Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Author Color'),
                            colors: authorColors,
                            value: authorColor,
                            onChange: function onChange(value) {
                                return setAttributes({ authorColor: value });
                            },
                            withTransparentOption: true
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Progressbar Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Progressbar Color'),
                            colors: progressbarColors,
                            value: progressbarColor,
                            onChange: function onChange(value) {
                                return setAttributes({ progressbarColor: value });
                            },
                            withTransparentOption: true
                        })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpneo-wrapper' },
                    React.createElement(
                        'div',
                        { className: 'wpneo-container' },
                        products && products.length ? React.createElement(
                            Fragment,
                            null,
                            products && React.createElement(
                                'div',
                                { className: 'wpneo-wrapper-inner' },
                                products.map(function (product) {
                                    {
                                        product.wpcf_project_listing.map(function (campaign) {
                                            if (campaign.ID == product.id) {
                                                output = React.createElement(
                                                    'div',
                                                    { className: 'wpneo-listings two col-' + product.column },
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-listing-img' },
                                                        React.createElement('div', { dangerouslySetInnerHTML: { __html: product.wpcf_product.product_thumb } }),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'overlay' },
                                                            React.createElement(
                                                                'div',
                                                                null,
                                                                React.createElement(
                                                                    'div',
                                                                    null,
                                                                    React.createElement(
                                                                        'a',
                                                                        { href: '#' },
                                                                        'View Campaign'
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    ),
                                                    React.createElement(
                                                        'div',
                                                        { className: 'wpneo-listing-content' },
                                                        React.createElement('div', { className: 'woocommerce' }),
                                                        React.createElement(
                                                            'h4',
                                                            null,
                                                            React.createElement(
                                                                'a',
                                                                { href: '#' },
                                                                product.title.rendered
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'p',
                                                            { className: 'wpneo-author' },
                                                            'by',
                                                            React.createElement(
                                                                'a',
                                                                { href: '#' },
                                                                ' ',
                                                                product.wpcf_product.display_name
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-location' },
                                                            React.createElement('i', { className: 'wpneo-icon wpneo-icon-location' }),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-meta-desc' },
                                                                product.wpcf_product.location
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'p',
                                                            { className: 'wpneo-short-description' },
                                                            product.wpcf_product.desc
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-raised-percent' },
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-meta-name' },
                                                                'Raised Percent :'
                                                            ),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-meta-desc' },
                                                                product.wpcf_product.raised_percent
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-raised-bar' },
                                                            React.createElement(
                                                                'div',
                                                                { id: 'neo-progressbar' },
                                                                React.createElement('div', { style: { width: product.wpcf_product.raised_percent } })
                                                            )
                                                        ),
                                                        React.createElement(
                                                            'div',
                                                            { className: 'wpneo-funding-data' },
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-funding-goal' },
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-desc' },
                                                                    React.createElement(
                                                                        'span',
                                                                        { className: 'woocommerce-Price-amount amount' },
                                                                        React.createElement(
                                                                            'span',
                                                                            { className: 'woocommerce-Price-currencySymbol' },
                                                                            '$'
                                                                        ),
                                                                        product.wpcf_product.funding_goal
                                                                    )
                                                                ),
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-name' },
                                                                    'Funding Goal'
                                                                )
                                                            ),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-time-remaining' },
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-desc' },
                                                                    product.wpcf_product.days_remaining
                                                                ),
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-name float-left' },
                                                                    'Days to go'
                                                                )
                                                            ),
                                                            React.createElement(
                                                                'div',
                                                                { className: 'wpneo-fund-raised' },
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-desc' },
                                                                    React.createElement(
                                                                        'span',
                                                                        { className: 'woocommerce-Price-amount amount' },
                                                                        React.createElement(
                                                                            'span',
                                                                            { className: 'woocommerce-Price-currencySymbol' },
                                                                            '$'
                                                                        ),
                                                                        product.wpcf_product.total_raised
                                                                    )
                                                                ),
                                                                React.createElement(
                                                                    'div',
                                                                    { className: 'wpneo-meta-name' },
                                                                    'Fund Raised'
                                                                )
                                                            )
                                                        )
                                                    )
                                                );
                                            }
                                        });
                                    }
                                    return output;
                                })
                            )
                        ) : React.createElement(
                            'div',
                            { className: 'wpcf-products-is-loading' },
                            React.createElement(Spinner, null)
                        )
                    )
                ),
                React.createElement(
                    'style',
                    null,
                    '\n                        #neo-progressbar > div, ul.wpneo-crowdfunding-update li:hover span.round-circle, .wpneo-links li a:hover, .wpneo-links li.active a, #neo-progressbar > div {\n                            background-color: ' + progressbarColor + '\n                        }\n                        .wpneo-funding-data span, .wpneo-time-remaining .wpneo-meta-desc, .wpneo-funding-goal .wpneo-meta-name, .wpneo-raised-percent, .wpneo-listing-content p.wpneo-short-description, .wpneo-location .wpneo-meta-desc, .wpneo-listings .wpneo-listing-content h4 a, .wpneo-fund-raised, .wpneo-time-remaining{\n                            color: ' + mjColor + '\n                        }\n                        .wpneo-listings .wpneo-listing-content .wpneo-author a, .wpneo-listings .wpneo-listing-content p.wpneo-author {\n                            color: ' + authorColor + '\n                        }\n                    '
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = withSelect(function (select, props) {
    var _props$attributes2 = props.attributes,
        numbers = _props$attributes2.numbers,
        order = _props$attributes2.order,
        order_by = _props$attributes2.order_by;

    var _select = select('core'),
        getEntityRecords = _select.getEntityRecords;

    return {
        products: getEntityRecords('postType', 'product', { per_page: numbers, order: order, orderby: order_by, status: 'publish' })
    };
})(Edit);

/***/ }),

/***/ "./reactjs/src/blocks/projectlisting/index.js":
/*!****************************************************!*\
  !*** ./reactjs/src/blocks/projectlisting/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/projectlisting/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/projectlisting', {
	title: __('Project Listing'),
	icon: 'list-view',
	category: 'wp-crowdfunding',
	keywords: [__('Campaign Listing'), __('WPCF Project Listing')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/registration/Edit.js":
/*!*************************************************!*\
  !*** ./reactjs/src/blocks/registration/Edit.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withState = wp.compose.withState;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ColorPalette = _wp$components.ColorPalette,
    RangeControl = _wp$components.RangeControl;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                _props$attributes = _props.attributes,
                labelfontSize = _props$attributes.labelfontSize,
                labelColor = _props$attributes.labelColor,
                inputfontSize = _props$attributes.inputfontSize,
                borderColor = _props$attributes.borderColor,
                inputTextColor = _props$attributes.inputTextColor,
                bgColorpalette = _props$attributes.bgColorpalette,
                titleColor = _props$attributes.titleColor,
                fontSize = _props$attributes.fontSize,
                fontWeight = _props$attributes.fontWeight,
                cancelbtnbgColorpalette = _props$attributes.cancelbtnbgColorpalette,
                cancelbtncolor = _props$attributes.cancelbtncolor,
                cancelfontWeight = _props$attributes.cancelfontWeight,
                cancelfontSize = _props$attributes.cancelfontSize;


            var inputtextcolors = [{ name: 'Dark Black', color: '#000000' }, { name: 'Light Gray', color: '#939393' }, { name: 'White', color: '#ffffff' }];
            var bordercolors = [{ name: 'Dark Black', color: '#eeeeee' }, { name: 'Gray', color: '#e2e4e7' }, { name: 'Light Gray', color: '#fafafa' }];

            var labelcolors = [{ name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

            // Background Color 
            var bgcolors = [{ name: 'Color Code: #0073a8', color: '#0073a8' }, { name: 'Color Code: #005075', color: '#005075' }, { name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

            // Title Color Color 
            var colors = [{ name: 'Gray', color: '#ccc' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];

            // Font Width.
            var SelectFontWidthControl = withState({
                fontWeight: fontWeight
            })(function (_ref) {
                var fontWeight = _ref.fontWeight,
                    setState = _ref.setState;
                return React.createElement(SelectControl, {
                    label: 'Font Weight',
                    value: fontWeight,
                    options: [{ label: '100', value: '100' }, { label: '400', value: '400' }, { label: '500', value: '500' }, { label: '600', value: '600' }, { label: '700', value: '700' }, { label: '800', value: '800' }],
                    onChange: function onChange(value) {
                        setAttributes({ fontWeight: value });
                    }
                });
            });

            var btnStyle = {
                background: bgColorpalette,
                color: titleColor,
                fontSize: fontSize,
                fontWeight: fontWeight

                // Font Width.
            };var SelectCancelFontWidthControl = withState({
                cancelfontWeight: cancelfontWeight
            })(function (_ref2) {
                var cancelfontWeight = _ref2.cancelfontWeight,
                    setState = _ref2.setState;
                return React.createElement(SelectControl, {
                    label: 'Font Weight',
                    value: cancelfontWeight,
                    options: [{ label: '100', value: '100' }, { label: '400', value: '400' }, { label: '500', value: '500' }, { label: '600', value: '600' }, { label: '700', value: '700' }, { label: '800', value: '800' }],
                    onChange: function onChange(value) {
                        setAttributes({ cancelfontWeight: value });
                    }
                });
            });

            // Title Color Color 
            var CancelColorPalette = withState({
                color: cancelbtncolor
            })(function (_ref3) {
                var color = _ref3.color,
                    setState = _ref3.setState;

                var colors = [{ name: 'Gray', color: '#ccc' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];
                return React.createElement(ColorPalette, {
                    label: 'Title Color',
                    colors: colors,
                    value: color,
                    onChange: function onChange(value) {
                        setAttributes({ cancelbtncolor: value });
                    }
                });
            });

            // Background Color 
            var CancelBgColorPalette = withState({
                bgcolor: cancelbtnbgColorpalette
            })(function (_ref4) {
                var bgcolor = _ref4.bgcolor,
                    setState = _ref4.setState;

                var bgcolors = [{ name: 'Color Code: #0073a8', color: '#0073a8' }, { name: 'Color Code: #005075', color: '#005075' }, { name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

                return React.createElement(ColorPalette, {
                    label: 'Background Color',
                    colors: bgcolors,
                    value: bgcolor,
                    onChange: function onChange(value) {
                        setAttributes({ cancelbtnbgColorpalette: value });
                    }
                });
            });

            var CancelBtnStyle = {
                background: cancelbtnbgColorpalette,
                color: cancelbtncolor,
                fontSize: cancelfontSize,
                fontWeight: cancelfontWeight
            };

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: __(''), initialOpen: true },
                        React.createElement(RangeControl, {
                            label: 'Input Font Size',
                            value: inputfontSize,
                            onChange: function onChange(value) {
                                setAttributes({ inputfontSize: value });
                            },
                            min: 5,
                            max: 30
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Input Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Input Text Color',
                            colors: inputtextcolors,
                            value: inputTextColor,
                            onChange: function onChange(value) {
                                setAttributes({ inputTextColor: value });
                            }
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Border Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Border Color',
                            colors: bordercolors,
                            value: borderColor,
                            onChange: function onChange(value) {
                                setAttributes({ borderColor: value });
                            }
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Label Style'), initialOpen: false },
                        React.createElement(RangeControl, {
                            label: 'Label Font Size',
                            value: labelfontSize,
                            onChange: function onChange(value) {
                                setAttributes({ labelfontSize: value });
                            },
                            min: 5,
                            max: 30
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Label Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Title Color',
                            colors: labelcolors,
                            value: labelColor,
                            onChange: function onChange(value) {
                                setAttributes({ labelColor: value });
                            }
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Signup Button Style'), initialOpen: false },
                        React.createElement(RangeControl, {
                            label: 'Font Size',
                            value: fontSize,
                            onChange: function onChange(value) {
                                setAttributes({ fontSize: value });
                            },
                            min: 5,
                            max: 30
                        }),
                        React.createElement(SelectFontWidthControl, null),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Title Color',
                            colors: colors,
                            value: titleColor,
                            onChange: function onChange(value) {
                                setAttributes({ titleColor: value });
                            }
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Background Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Background Color',
                            colors: bgcolors,
                            value: bgColorpalette,
                            onChange: function onChange(value) {
                                setAttributes({ bgColorpalette: value });
                            }
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Cancel Button Style'), initialOpen: false },
                        React.createElement(RangeControl, {
                            label: 'Font Size',
                            value: cancelfontSize,
                            onChange: function onChange(value) {
                                setAttributes({ cancelfontSize: value });
                            },
                            min: 5,
                            max: 30
                        }),
                        React.createElement(SelectCancelFontWidthControl, null),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(CancelColorPalette, null),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Background Color', 'wp-crowdfunding')
                        ),
                        React.createElement(CancelBgColorPalette, null)
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpcf-form-field' },
                    React.createElement(
                        'div',
                        { className: 'wpneo-user-registration-wrap' },
                        React.createElement(
                            'form',
                            { action: '', id: 'wpneo-registration', method: 'post' },
                            React.createElement('input', { type: 'hidden', id: 'wpcf_form_action_field', name: 'wpcf_form_action_field', value: '' }),
                            React.createElement('input', { type: 'hidden', name: '_wp_http_referer', value: '' }),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single wpneo-first-half' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'First Name'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('input', { type: 'text', id: 'fname', autocomplete: 'off', className: '', name: 'fname', placeholder: 'Enter First Name' }),
                                    ' '
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single wpneo-second-half' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'Last Name'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('input', { type: 'text', id: 'lname', autocomplete: 'off', className: '', name: 'lname', placeholder: 'Enter Last Name' }),
                                    ' '
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single ' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'Username *'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('input', { type: 'text', id: 'username', autocomplete: 'off', className: 'required', name: 'username', placeholder: 'Enter Username' }),
                                    ' '
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single ' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'Password *'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('input', { type: 'password', id: 'password', autocomplete: 'off', className: 'required', name: 'password', placeholder: 'Enter Password' }),
                                    ' '
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single wpneo-first-half' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'Email *'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('input', { type: 'text', id: 'email', autocomplete: 'off', className: 'required', name: 'email', placeholder: 'Enter Email' }),
                                    ' '
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single wpneo-second-half' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'Website'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('input', { type: 'text', id: 'website', autocomplete: 'off', className: '', name: 'website', placeholder: 'Enter Website' }),
                                    ' '
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single ' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'Nickname'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('input', { type: 'text', id: 'nickname', autocomplete: 'off', className: '', name: 'nickname', placeholder: 'Enter Nickname' }),
                                    ' '
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single ' },
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-name' },
                                    'About / Bio'
                                ),
                                React.createElement(
                                    'div',
                                    { className: 'wpneo-fields' },
                                    React.createElement('textarea', { id: 'bio', autocomplete: 'off', className: '', name: 'bio' })
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-single wpneo-register' },
                                React.createElement(
                                    'a',
                                    { href: '#', className: 'wpneo-cancel-campaign', style: CancelBtnStyle },
                                    'Cancel'
                                ),
                                React.createElement('input', { type: 'hidden', name: 'action', value: 'wpcf_registration' }),
                                React.createElement('input', { type: 'hidden', name: 'current_page', value: '' }),
                                React.createElement('input', { type: 'submit', className: 'wpneo-submit-campaign', id: 'user-registration-btn', value: 'Sign UP', name: 'submits', style: btnStyle })
                            )
                        )
                    )
                ),
                React.createElement(
                    'style',
                    null,
                    '\n                        .wpneo-user-registration-wrap .wpneo-name {\n                            font-size: ' + labelfontSize + 'px;\n                            color: ' + labelColor + '\n                        }\n                        .wpneo-fields input[type="number"], .wpneo-fields input[type="text"], .wpneo-fields input[type="email"], .wpneo-fields input[type="password"] {\n                            border: 1px solid ' + borderColor + ';\n                        }\n                        .wpneo-fields input[type="number"], .wpneo-fields input[type="text"], .wpneo-fields input[type="email"], .wpneo-fields input[type="password"] {\n                            font-size: ' + inputfontSize + 'px;\n                            color: ' + inputTextColor + '\n                        }\n                    '
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = Edit;

/***/ }),

/***/ "./reactjs/src/blocks/registration/index.js":
/*!**************************************************!*\
  !*** ./reactjs/src/blocks/registration/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/registration/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/registration', {
	title: __('Registration'),
	icon: 'art',
	category: 'wp-crowdfunding',
	keywords: [__('Registration'), __('WPCF Registration')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/search/Edit.js":
/*!*******************************************!*\
  !*** ./reactjs/src/blocks/search/Edit.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withState = wp.compose.withState;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ColorPalette = _wp$components.ColorPalette,
    RangeControl = _wp$components.RangeControl;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                _props$attributes = _props.attributes,
                formSize = _props$attributes.formSize,
                bgColorpalette = _props$attributes.bgColorpalette,
                titleColor = _props$attributes.titleColor,
                fontSize = _props$attributes.fontSize,
                fontWeight = _props$attributes.fontWeight,
                SearchfontSize = _props$attributes.SearchfontSize,
                formAlign = _props$attributes.formAlign;

            // Background Color 

            var bgcolors = [{ name: 'Color Code: #0073a8', color: '#0073a8' }, { name: 'Color Code: #005075', color: '#005075' }, { name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

            // Title Color Color 
            var colors = [{ name: 'Gray', color: '#ccc' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];

            // Font Width.
            var SelectFontWidthControl = withState({
                fontWeight: fontWeight
            })(function (_ref) {
                var fontWeight = _ref.fontWeight,
                    setState = _ref.setState;
                return React.createElement(SelectControl, {
                    label: 'Font Weight',
                    value: fontWeight,
                    options: [{ label: '100', value: '100' }, { label: '400', value: '400' }, { label: '500', value: '500' }, { label: '600', value: '600' }, { label: '700', value: '700' }, { label: '800', value: '800' }],
                    onChange: function onChange(value) {
                        setAttributes({ fontWeight: value });
                    }
                });
            });

            var btnStyle = {
                background: bgColorpalette,
                color: titleColor,
                fontSize: fontSize,
                fontWeight: fontWeight
            };
            var searchStyle = {
                fontSize: SearchfontSize
            };

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: '', initialOpen: true },
                        React.createElement(SelectControl, {
                            label: __("Alignment"),
                            value: formAlign,
                            options: [{ label: __('Left'), value: 'left' }, { label: __('Right'), value: 'right' }, { label: __('Center'), value: 'center' }],
                            onChange: function onChange(value) {
                                return setAttributes({ formAlign: value });
                            }
                        }),
                        React.createElement(SelectControl, {
                            label: __("Form Size"),
                            value: formSize,
                            options: [{ label: __('Small'), value: 'small' }, { label: __('Medium'), value: 'medium' }, { label: __('Full'), value: 'full' }],
                            onChange: function onChange(value) {
                                return setAttributes({ formSize: value });
                            }
                        }),
                        React.createElement(RangeControl, {
                            label: 'Font Size',
                            value: SearchfontSize,
                            onChange: function onChange(value) {
                                setAttributes({ SearchfontSize: value });
                            },
                            min: 5,
                            max: 20
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Button Style'), initialOpen: false },
                        React.createElement(RangeControl, {
                            label: 'Font Size',
                            value: fontSize,
                            onChange: function onChange(value) {
                                setAttributes({ fontSize: value });
                            },
                            min: 5,
                            max: 30
                        }),
                        React.createElement(SelectFontWidthControl, null),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Title Color',
                            colors: colors,
                            value: titleColor,
                            onChange: function onChange(value) {
                                setAttributes({ titleColor: value });
                            }
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Background Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: 'Background Color',
                            colors: bgcolors,
                            value: bgColorpalette,
                            onChange: function onChange(value) {
                                setAttributes({ bgColorpalette: value });
                            }
                        })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpcf-form-field ' + formSize + ' ' + formAlign },
                    React.createElement(
                        'form',
                        { role: 'search', method: 'get', action: '' },
                        React.createElement('input', { type: 'search', className: 'search-field', placeholder: 'Search', style: searchStyle }),
                        React.createElement('input', { type: 'hidden', name: 'post_type', value: 'product' }),
                        React.createElement('input', { type: 'hidden', name: 'product_type', value: 'croudfunding' }),
                        React.createElement(
                            'button',
                            { type: 'button', style: btnStyle },
                            'Search'
                        )
                    )
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = Edit;

/***/ }),

/***/ "./reactjs/src/blocks/search/index.js":
/*!********************************************!*\
  !*** ./reactjs/src/blocks/search/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/search/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/search', {
	title: __('Campaign Search'),
	icon: 'search',
	category: 'wp-crowdfunding',
	keywords: [__('Latest Campaign Search'), __('Campaign Search')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/single_campaign/Edit.js":
/*!****************************************************!*\
  !*** ./reactjs/src/blocks/single_campaign/Edit.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withState = wp.compose.withState;
var withSelect = wp.data.withSelect;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    ColorPalette = _wp$components.ColorPalette,
    TextControl = _wp$components.TextControl,
    Spinner = _wp$components.Spinner;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                _props$attributes = _props.attributes,
                campaignID = _props$attributes.campaignID,
                textColor = _props$attributes.textColor,
                bgColor = _props$attributes.bgColor;
            var products = this.props.products;


            var textColors = [{ name: 'Green', color: '#94c94a' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];

            var bgcolors = [{ name: 'Green', color: '#94c94a' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: __(''), initialOpen: true },
                        React.createElement(TextControl, {
                            label: __('Campaign ID'),
                            value: campaignID,
                            onChange: function onChange(value) {
                                return setAttributes({ campaignID: value });
                            }
                        })
                    ),
                    React.createElement(
                        PanelBody,
                        { title: __('Style'), initialOpen: true },
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Title Color'),
                            colors: textColors,
                            value: textColor,
                            onChange: function onChange(value) {
                                return setAttributes({ textColor: value });
                            },
                            withTransparentOption: true
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Background Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Title Color'),
                            colors: bgcolors,
                            value: bgColor,
                            onChange: function onChange(value) {
                                return setAttributes({ bgColor: value });
                            },
                            withTransparentOption: true
                        })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpcf-dashboard' },
                    products && products.length ? React.createElement(
                        Fragment,
                        null,
                        products && React.createElement(
                            'div',
                            { className: 'wpneo-wrapper-inner' },
                            products.map(function (product) {
                                if (product.id == campaignID) {
                                    return React.createElement('div', { className: 'woocommerce', dangerouslySetInnerHTML: { __html: product.wpcf_single_campaign } });
                                }
                            })
                        )
                    ) : React.createElement(
                        'div',
                        { className: 'wpcf-products-is-loading' },
                        campaignID ? React.createElement(Spinner, null) : React.createElement(
                            'h2',
                            null,
                            'Add your Campaign ID'
                        )
                    )
                ),
                React.createElement(
                    'style',
                    null,
                    '\n                        .wpneo-list-details .wpneo_donate_button{\n                            background-color: ' + bgColor + '\n                        }\n                        .tab-rewards-wrapper .overlay {\n                            background: ' + bgColor + '\n                        }\n                        a.wpneo-fund-modal-btn.wpneo-link-style1, \n                        .wpneo-tabs-menu li.wpneo-current a {\n                            color: ' + textColor + '\n                        }\n                        .wpneo-tabs-menu li.wpneo-current {\n                            border-bottom: 3px solid ' + textColor + ';\n                        }\n                    '
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = withSelect(function (select, props) {
    return {
        products: select('core').getEntityRecords('postType', 'product', { per_page: -1, status: 'publish',
            _embed: true })
    };
})(Edit);

/***/ }),

/***/ "./reactjs/src/blocks/single_campaign/index.js":
/*!*****************************************************!*\
  !*** ./reactjs/src/blocks/single_campaign/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/single_campaign/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/singlecampaign', {
	title: __('Single Campaign'),
	icon: 'editor-kitchensink',
	category: 'wp-crowdfunding',
	keywords: [__('Single Campaign'), __('WPCF Single Campaign')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/blocks/submit_form/Edit.js":
/*!************************************************!*\
  !*** ./reactjs/src/blocks/submit_form/Edit.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var withState = wp.compose.withState;
var InspectorControls = wp.editor.InspectorControls;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    ColorPalette = _wp$components.ColorPalette;

var Edit = function (_Component) {
    _inherits(Edit, _Component);

    function Edit(props) {
        _classCallCheck(this, Edit);

        var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).call(this, props));

        _this.state = { openPanelSetting: '' };
        return _this;
    }

    _createClass(Edit, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                setAttributes = _props.setAttributes,
                _props$attributes = _props.attributes,
                textColor = _props$attributes.textColor,
                bgColor = _props$attributes.bgColor,
                cancelBtnColor = _props$attributes.cancelBtnColor;


            var bgcolors = [{ name: 'Color Code: #1adc68', color: '#1adc68' }, { name: 'Color Code: #8224e3', color: '#8224e3' }, { name: 'Dark Black', color: '#111111' }, { name: 'Light Gray', color: '#767676' }, { name: 'White', color: '#ffffff' }];

            var textColors = [{ name: 'Green', color: '#94c94a' }, { name: 'White', color: '#fff' }, { name: 'Black', color: '#000' }];

            var cancelBtnColors = [{ name: 'Red', color: 'red' }, { name: 'Dark', color: '#cf0000' }];

            return React.createElement(
                Fragment,
                null,
                React.createElement(
                    InspectorControls,
                    { key: 'inspector' },
                    React.createElement(
                        PanelBody,
                        { title: 'Form Style', initialOpen: true },
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Background Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Bg Color'),
                            colors: bgcolors,
                            value: bgColor,
                            onChange: function onChange(value) {
                                return setAttributes({ bgColor: value });
                            },
                            withTransparentOption: true
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Text Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Title Color'),
                            colors: textColors,
                            value: textColor,
                            onChange: function onChange(value) {
                                return setAttributes({ textColor: value });
                            },
                            withTransparentOption: true
                        }),
                        React.createElement(
                            'label',
                            { className: 'components-base-control__label' },
                            __('Cancel Button Color', 'wp-crowdfunding')
                        ),
                        React.createElement(ColorPalette, {
                            label: __('Title Color'),
                            colors: cancelBtnColors,
                            value: cancelBtnColor,
                            onChange: function onChange(value) {
                                return setAttributes({ cancelBtnColor: value });
                            },
                            withTransparentOption: true
                        })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'wpcf-form-field' },
                    React.createElement(
                        'form',
                        { type: 'post', action: '', id: 'wpneofrontenddata' },
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Title'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpneo-form-title', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Put the campaign title here'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Description'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement(
                                    'div',
                                    { id: 'wp-wpneo-form-description-wrap', className: 'wp-core-ui wp-editor-wrap tmce-active' },
                                    React.createElement('link', { rel: 'stylesheet', id: 'editor-buttons-css', href: '', media: 'all' }),
                                    React.createElement(
                                        'div',
                                        { id: 'wp-wpneo-form-description-editor-tools', className: 'wp-editor-tools hide-if-no-js' },
                                        React.createElement(
                                            'div',
                                            { id: 'wp-wpneo-form-description-media-buttons', className: 'wp-media-buttons' },
                                            React.createElement(
                                                'button',
                                                { type: 'button', id: 'insert-media-button', className: 'button insert-media add_media', 'data-editor': 'wpneo-form-description' },
                                                React.createElement('span', { className: 'wp-media-buttons-icon' }),
                                                ' Add Media'
                                            )
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wp-editor-tabs' },
                                            React.createElement(
                                                'button',
                                                { type: 'button', id: 'wpneo-form-description-tmce', className: 'wp-switch-editor switch-tmce', 'data-wp-editor-id': 'wpneo-form-description' },
                                                'Visual'
                                            ),
                                            React.createElement(
                                                'button',
                                                { type: 'button', id: 'wpneo-form-description-html', className: 'wp-switch-editor switch-html', 'data-wp-editor-id': 'wpneo-form-description' },
                                                'Text'
                                            )
                                        )
                                    ),
                                    React.createElement(
                                        'div',
                                        { id: 'wp-wpneo-form-description-editor-container', className: 'wp-editor-container' },
                                        React.createElement(
                                            'div',
                                            { id: 'qt_wpneo-form-description_toolbar', className: 'quicktags-toolbar' },
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_strong', className: 'ed_button button button-small', 'aria-label': 'Bold', value: 'b' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_em', className: 'ed_button button button-small', 'aria-label': 'Italic', value: 'i' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_link', className: 'ed_button button button-small', 'aria-label': 'Insert link', value: 'link' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_block', className: 'ed_button button button-small', 'aria-label': 'Blockquote', value: 'b-quote' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_del', className: 'ed_button button button-small', 'aria-label': 'Deleted text (strikethrough)', value: 'del' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_ins', className: 'ed_button button button-small', 'aria-label': 'Inserted text', value: 'ins' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_img', className: 'ed_button button button-small', 'aria-label': 'Insert image', value: 'img' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_ul', className: 'ed_button button button-small', 'aria-label': 'Bulleted list', value: 'ul' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_ol', className: 'ed_button button button-small', 'aria-label': 'Numbered list', value: 'ol' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_li', className: 'ed_button button button-small', 'aria-label': 'List item', value: 'li' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_code', className: 'ed_button button button-small', 'aria-label': 'Code', value: 'code' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_more', className: 'ed_button button button-small', 'aria-label': 'Insert Read More tag', value: 'more' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-description_close', className: 'ed_button button button-small', title: 'Close all open tags', value: 'close tags' })
                                        ),
                                        React.createElement('textarea', { className: 'wp-editor-area', rows: '15', autocomplete: 'off', cols: '40', name: 'wpneo-form-description', id: 'wpneo-form-description', 'aria-hidden': 'true' })
                                    )
                                ),
                                React.createElement(
                                    'small',
                                    null,
                                    'Put the campaign description here'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Short Description'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement(
                                    'div',
                                    { id: 'wp-wpneo-form-short-description-wrap', className: 'wp-core-ui wp-editor-wrap tmce-active' },
                                    React.createElement(
                                        'div',
                                        { id: 'wp-wpneo-form-short-description-editor-tools', className: 'wp-editor-tools hide-if-no-js' },
                                        React.createElement(
                                            'div',
                                            { id: 'wp-wpneo-form-short-description-media-buttons', className: 'wp-media-buttons' },
                                            React.createElement(
                                                'button',
                                                { type: 'button', className: 'button insert-media add_media', 'data-editor': 'wpneo-form-short-description' },
                                                React.createElement('span', { className: 'wp-media-buttons-icon' }),
                                                ' Add Media'
                                            )
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wp-editor-tabs' },
                                            React.createElement(
                                                'button',
                                                { type: 'button', id: 'wpneo-form-short-description-tmce', className: 'wp-switch-editor switch-tmce', 'data-wp-editor-id': 'wpneo-form-short-description' },
                                                'Visual'
                                            ),
                                            React.createElement(
                                                'button',
                                                { type: 'button', id: 'wpneo-form-short-description-html', className: 'wp-switch-editor switch-html', 'data-wp-editor-id': 'wpneo-form-short-description' },
                                                'Text'
                                            )
                                        )
                                    ),
                                    React.createElement(
                                        'div',
                                        { id: 'wp-wpneo-form-short-description-editor-container', className: 'wp-editor-container' },
                                        React.createElement(
                                            'div',
                                            { id: 'qt_wpneo-form-short-description_toolbar', className: 'quicktags-toolbar' },
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_strong', className: 'ed_button button button-small', 'aria-label': 'Bold', value: 'b' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_em', className: 'ed_button button button-small', 'aria-label': 'Italic', value: 'i' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_link', className: 'ed_button button button-small', 'aria-label': 'Insert link', value: 'link' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_block', className: 'ed_button button button-small', 'aria-label': 'Blockquote', value: 'b-quote' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_del', className: 'ed_button button button-small', 'aria-label': 'Deleted text (strikethrough)', value: 'del' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_ins', className: 'ed_button button button-small', 'aria-label': 'Inserted text', value: 'ins' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_img', className: 'ed_button button button-small', 'aria-label': 'Insert image', value: 'img' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_ul', className: 'ed_button button button-small', 'aria-label': 'Bulleted list', value: 'ul' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_ol', className: 'ed_button button button-small', 'aria-label': 'Numbered list', value: 'ol' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_li', className: 'ed_button button button-small', 'aria-label': 'List item', value: 'li' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_code', className: 'ed_button button button-small', 'aria-label': 'Code', value: 'code' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_more', className: 'ed_button button button-small', 'aria-label': 'Insert Read More tag', value: 'more' }),
                                            React.createElement('input', { type: 'button', id: 'qt_wpneo-form-short-description_close', className: 'ed_button button button-small', title: 'Close all open tags', value: 'close tags' })
                                        ),
                                        React.createElement('textarea', { className: 'wp-editor-area', rows: '10', autocomplete: 'off', cols: '40', name: 'wpneo-form-short-description', id: 'wpneo-form-short-description', 'aria-hidden': 'true' })
                                    )
                                ),
                                React.createElement(
                                    'small',
                                    null,
                                    'Put Here Product Short Description'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Category'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement(
                                    'select',
                                    { name: 'wpneo-form-category' },
                                    React.createElement(
                                        'option',
                                        { value: 'clothing' },
                                        'Clothing'
                                    ),
                                    React.createElement(
                                        'option',
                                        { value: 'crafts' },
                                        'Crafts'
                                    )
                                ),
                                React.createElement(
                                    'small',
                                    null,
                                    'Select your campaign category'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Tag'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpneo-form-tag', placeholder: 'Tag', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Separate tags with commas eg: tag1,tag2'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Feature Image'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpneo-form-image-url', className: 'wpneo-upload wpneo-form-image-url', value: '' }),
                                React.createElement('input', { type: 'hidden', name: 'wpneo-form-image-id', className: 'wpneo-form-image-id', value: '' }),
                                React.createElement('input', { type: 'button', id: 'cc-image-upload-file-button', className: 'wpneo-image-upload float-right', value: 'Upload Image', 'data-url': '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Upload a campaign feature image'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Video'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpneo-form-video', value: '', placeholder: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Put the campaign video URL here'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Campaign End Method'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement(
                                    'select',
                                    { name: 'wpneo-form-type', className: 'wpneo-form-type' },
                                    React.createElement(
                                        'option',
                                        { value: 'target_goal' },
                                        'Target Goal'
                                    ),
                                    React.createElement(
                                        'option',
                                        { value: 'target_date' },
                                        'Target Date'
                                    ),
                                    React.createElement(
                                        'option',
                                        { value: 'target_goal_and_date' },
                                        'Target Goal & Date'
                                    ),
                                    React.createElement(
                                        'option',
                                        { value: 'never_end' },
                                        'Campaign Never Ends'
                                    )
                                ),
                                React.createElement(
                                    'small',
                                    null,
                                    'Choose the stage when campaign will end'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single wpneo-first-half' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Start Date'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpneo-form-start-date', value: '', id: 'wpneo_form_start_date', className: 'hasDatepicker' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Campaign start date (dd-mm-yy)'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single wpneo-second-half' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'End Date'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpneo-form-end-date', value: '', id: 'wpneo_form_end_date', className: 'hasDatepicker' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Campaign end date (dd-mm-yy)'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single wpneo-first-half' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Minimum Amount'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'number', name: 'wpneo-form-min-price', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Minimum campaign funding amount'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single wpneo-second-half' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Maximum Amount'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'number', name: 'wpneo-form-max-price', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Maximum campaign funding amount'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Funding Goal'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'number', name: 'wpneo-form-funding-goal', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Campaign funding goal'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single wpneo-first-half' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Recommended Amount'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'number', name: 'wpneo-form-recommended-price', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Recommended campaign funding amount'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single wpneo-second-half' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Predefined Pledge Amount'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpcf_predefined_pledge_amount', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Predefined amount allow you to place the amount in donate box by click, price should separated by comma (,), example: ',
                                    React.createElement(
                                        'code',
                                        null,
                                        '10,20,30,40'
                                    )
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Contributor Table'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'checkbox', name: 'wpneo-form-contributor-table', value: '1' }),
                                'Show contributor table on campaign single page'
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Contributor Anonymity'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'checkbox', name: 'wpneo-form-contributor-show', value: '1' }),
                                'Make contributors anonymous on the contributor table'
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Country'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement(
                                    'select',
                                    { name: 'wpneo-form-country', className: 'wpneo-form-country' },
                                    React.createElement(
                                        'option',
                                        { selected: 'selected', value: '0' },
                                        'Select a country'
                                    ),
                                    React.createElement(
                                        'option',
                                        { value: 'BD' },
                                        'Bangladesh'
                                    )
                                ),
                                React.createElement(
                                    'small',
                                    null,
                                    'Select your country'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-single' },
                            React.createElement(
                                'div',
                                { className: 'wpneo-name' },
                                'Location'
                            ),
                            React.createElement(
                                'div',
                                { className: 'wpneo-fields' },
                                React.createElement('input', { type: 'text', name: 'wpneo-form-location', value: '' }),
                                React.createElement(
                                    'small',
                                    null,
                                    'Put the campaign location here'
                                )
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-reward-option' },
                            'Reward Option'
                        ),
                        React.createElement(
                            'div',
                            { className: 'panel', id: 'reward_options' },
                            React.createElement(
                                'div',
                                { className: 'reward_group' },
                                React.createElement(
                                    'div',
                                    { className: 'campaign_rewards_field_copy' },
                                    React.createElement(
                                        'div',
                                        { className: 'wpneo-single' },
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-name' },
                                            'Pledge Amount'
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-fields' },
                                            React.createElement('input', { type: 'number', value: '', id: 'wpneo_rewards_pladge_amount[]', name: 'wpneo_rewards_pladge_amount[]', className: 'wc_input_price' }),
                                            React.createElement(
                                                'small',
                                                null,
                                                'Pledge Amount'
                                            )
                                        )
                                    ),
                                    React.createElement(
                                        'div',
                                        { className: 'wpneo-single' },
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-name' },
                                            'Reward Image'
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-fields' },
                                            React.createElement('input', { type: 'text', name: 'wpneo_rewards_image_fields', className: 'wpneo-upload wpneo_rewards_image_field_url', value: '' }),
                                            React.createElement('input', { type: 'hidden', name: 'wpneo_rewards_image_field[]', className: 'wpneo_rewards_image_field', value: '' }),
                                            React.createElement('input', { type: 'button', id: 'cc-image-upload-file-button', className: 'wpneo-image-upload-btn float-right', value: 'Upload Image' }),
                                            React.createElement(
                                                'small',
                                                null,
                                                'Upload a reward image'
                                            )
                                        )
                                    ),
                                    React.createElement(
                                        'div',
                                        { className: 'wpneo-single form-field' },
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-name' },
                                            'Reward'
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-fields float-right' },
                                            React.createElement('textarea', { cols: '20', rows: '2', id: 'wpneo_rewards_description[]', name: 'wpneo_rewards_description[]', className: 'short' }),
                                            React.createElement(
                                                'small',
                                                null,
                                                'Reward Description'
                                            )
                                        )
                                    ),
                                    React.createElement(
                                        'div',
                                        { className: 'wpneo-single wpneo-first-half' },
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-name' },
                                            'Estimated Delivery Month'
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-fields' },
                                            React.createElement(
                                                'select',
                                                { className: 'select short', name: 'wpneo_rewards_endmonth[]', id: 'wpneo_rewards_endmonth[]' },
                                                React.createElement(
                                                    'option',
                                                    { selected: 'selected', value: '' },
                                                    '- Select -'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'jan' },
                                                    'January'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'feb' },
                                                    'February'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'mar' },
                                                    'March'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'apr' },
                                                    'April'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'may' },
                                                    'May'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'jun' },
                                                    'June'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'jul' },
                                                    'July'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'aug' },
                                                    'August'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'sep' },
                                                    'September'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'oct' },
                                                    'October'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'nov' },
                                                    'November'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: 'dec' },
                                                    'December'
                                                )
                                            ),
                                            React.createElement(
                                                'small',
                                                null,
                                                'Estimated Delivery Month of the Reward'
                                            )
                                        )
                                    ),
                                    React.createElement(
                                        'div',
                                        { className: 'wpneo-single wpneo-second-half' },
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-name' },
                                            'Estimated Delivery Year'
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-fields' },
                                            React.createElement(
                                                'select',
                                                { className: 'select short', name: 'wpneo_rewards_endyear[]', id: 'wpneo_rewards_endyear[]' },
                                                React.createElement(
                                                    'option',
                                                    { selected: 'selected', value: '' },
                                                    '- Select -'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: '2019' },
                                                    '2019'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: '2020' },
                                                    '2020'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: '2021' },
                                                    '2021'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: '2022' },
                                                    '2022'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: '2023' },
                                                    '2023'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: '2024' },
                                                    '2024'
                                                ),
                                                React.createElement(
                                                    'option',
                                                    { value: '2025' },
                                                    '2025'
                                                )
                                            ),
                                            React.createElement(
                                                'small',
                                                null,
                                                'Estimated Delivery Year of the Reward'
                                            )
                                        )
                                    ),
                                    React.createElement(
                                        'div',
                                        { className: 'wpneo-single' },
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-name' },
                                            'Quantity'
                                        ),
                                        React.createElement(
                                            'div',
                                            { className: 'wpneo-fields' },
                                            React.createElement('input', { type: 'number', value: '', id: 'wpneo_rewards_item_limit[]', name: 'wpneo_rewards_item_limit[]', className: 'wc_input_price' }),
                                            React.createElement(
                                                'small',
                                                null,
                                                'Quantity of physical products'
                                            )
                                        )
                                    )
                                )
                            ),
                            React.createElement(
                                'div',
                                { className: 'text-right' },
                                React.createElement('input', { type: 'button', value: '+ Add', id: 'addreward', className: 'button tagadd', name: 'save' })
                            )
                        ),
                        React.createElement('div', { className: 'wpneo-title' }),
                        React.createElement('div', { className: 'wpneo-text' }),
                        React.createElement(
                            'div',
                            { className: 'wpneo-requirement-title' },
                            React.createElement('input', { id: 'wpcf-term-agree', type: 'checkbox', value: 'agree', name: 'wpneo_terms_agree' }),
                            React.createElement(
                                'label',
                                { 'for': 'wpcf-term-agree' },
                                'I agree with the terms and conditions.'
                            )
                        ),
                        React.createElement(
                            'div',
                            { className: 'wpneo-form-action' },
                            React.createElement('input', { type: 'hidden', name: 'action', value: 'addfrontenddata' }),
                            React.createElement('input', { type: 'submit', className: 'wpneo-submit-campaign', value: 'Submit campaign' }),
                            React.createElement(
                                'a',
                                { href: '#', className: 'wpneo-cancel-campaign' },
                                'Cancel'
                            )
                        ),
                        React.createElement('input', { type: 'hidden', id: 'wpcf_form_action_field', name: 'wpcf_form_action_field', value: '' }),
                        React.createElement('input', { type: 'hidden', name: '_wp_http_referer', value: '' })
                    )
                ),
                React.createElement(
                    'style',
                    null,
                    '\n                        input[type="button"].wpneo-image-upload, .wpneo-image-upload.float-right, .wpneo-image-upload-btn, #addreward, #wpneofrontenddata .wpneo-form-action input[type="submit"].wpneo-submit-campaign{\n                            background-color: ' + bgColor + '\n                        }\n                        \n                        input[type="button"].wpneo-image-upload, .wpneo-image-upload.float-right, .wpneo-image-upload-btn, #addreward, #wpneofrontenddata .wpneo-form-action input[type="submit"].wpneo-submit-campaign, a.wpneo-cancel-campaign, .editor-styles-wrapper a.wpneo-cancel-campaign {\n                            color: ' + textColor + '\n                        }\n                        a.wpneo-cancel-campaign {\n                            background-color: ' + cancelBtnColor + '\n                        }\n                    '
                )
            );
        }
    }]);

    return Edit;
}(Component);

exports.default = Edit;

/***/ }),

/***/ "./reactjs/src/blocks/submit_form/index.js":
/*!*************************************************!*\
  !*** ./reactjs/src/blocks/submit_form/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Edit = __webpack_require__(/*! ./Edit */ "./reactjs/src/blocks/submit_form/Edit.js");

var _Edit2 = _interopRequireDefault(_Edit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __ = wp.i18n.__;
var registerBlockType = wp.blocks.registerBlockType;


registerBlockType('wp-crowdfunding/submitform', {
	title: __('Campaign Submission'),
	icon: 'buddicons-groups',
	category: 'wp-crowdfunding',
	keywords: [__('Campaign Submit Form'), __('WPCF Submit Form')],
	edit: _Edit2.default,
	save: function save(props) {
		return null;
	}
});

/***/ }),

/***/ "./reactjs/src/index.js":
/*!******************************!*\
  !*** ./reactjs/src/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ./blocks/search/index */ "./reactjs/src/blocks/search/index.js");

__webpack_require__(/*! ./blocks/donate/index */ "./reactjs/src/blocks/donate/index.js");

__webpack_require__(/*! ./blocks/projectlisting/index */ "./reactjs/src/blocks/projectlisting/index.js");

__webpack_require__(/*! ./blocks/popular_campaigns/index */ "./reactjs/src/blocks/popular_campaigns/index.js");

__webpack_require__(/*! ./blocks/campaign_box/index */ "./reactjs/src/blocks/campaign_box/index.js");

__webpack_require__(/*! ./blocks/registration/index */ "./reactjs/src/blocks/registration/index.js");

__webpack_require__(/*! ./blocks/dashboard/index */ "./reactjs/src/blocks/dashboard/index.js");

__webpack_require__(/*! ./blocks/single_campaign/index */ "./reactjs/src/blocks/single_campaign/index.js");

__webpack_require__(/*! ./blocks/submit_form/index */ "./reactjs/src/blocks/submit_form/index.js");

/***/ }),

/***/ 0:
/*!************************************!*\
  !*** multi ./reactjs/src/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/ibrahim/Local Sites/crowd-funding/app/public/wp-content/plugins/wp-crowdfunding/reactjs/src/index.js */"./reactjs/src/index.js");


/***/ })

/******/ });
//# sourceMappingURL=blocks.min.js.map